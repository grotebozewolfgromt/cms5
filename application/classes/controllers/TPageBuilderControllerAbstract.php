<?php

namespace dr\classes\controllers;

use dr\classes\dom\tag\Div;
use dr\classes\dom\tag\form\InputCheckbox;
use dr\classes\dom\tag\form\InputDate;
use dr\classes\dom\tag\form\InputHidden;
use dr\classes\dom\tag\form\Select;
use dr\classes\dom\tag\HTMLTag;
use dr\classes\dom\tag\Svg;
use dr\modules\Mod_Sys_Modules\models\TSysModules;
use dr\classes\patterns\TModuleAbstract;
use dr\modules\Mod_PageBuilder\models\TPageBuilderBlocks;
use dr\classes\dom\tag\form\InputText;
use dr\classes\dom\tag\form\InputTime;
use dr\classes\dom\tag\form\Textarea;
use dr\classes\dom\tag\webcomponents\DRInputDateTime;
use dr\classes\dom\validator\TMaximumLength;
use dr\classes\dom\validator\TOnlyNumeric;
use dr\classes\dom\validator\TRequired;
use dr\classes\locale\TLocalisation;
use dr\modules\Mod_PageBuilder\models\TPageBuilderDocumentsStatusses;
use dr\modules\Mod_PageBuilder\models\TPageBuilderWebpages;
use dr\modules\Mod_Sys_CMSUsers\models\TSysCMSUsers;
use dr\modules\Mod_Sys_Localisation\models\TSysLanguages;
use dr\modules\Mod_Sys_Websites\models\TSysWebsites;

// use dr\classes\controllers\TControllerAbstract;


/**
 * class TPageBuilderControllerAbstract
 * 
 * This class is an abstract controller for a page builder.
 * It contains all the information that a pagebuilder needs in order to create the gui.
 * 
 * DesignObject
 * ============
 * A DesignObject is the "thing" you can drop into the design: a 3 column structure, a block, heading, a paragraph, an image, a list
 * 
 *  
 * CATEGORIES & TYPES
 * ==================
 * There is a big overlap between types and categories.
 * While they can be the same, they don't nessarily have to be.
 * 
 * Categories   - used for the user to put DesignObjects into a logical structure to find them
 *                A DesignObject can live in MULTIPLE categories
 * Types        - used to determine where the user is allowed to drag&drop DesignElements
 *                A DesignObject is only of ONE type
 * 
 * Most categories are also types, but not all types are categories.
 * There can be a category "all", "favorites" which isn't a type
 * A module for example can create a category for the sake of easiness/clearness, 
 * but that won't change the type of the DesignObjects
 * 
 * A type is: a structure, block, element or variable
 * A structure can be dragged into an empty space, not in a block or element.
 * But a block or element can be dragged into a structure.
 * A block can not be dragged into an element, but an element can be dragged into a block.
 * 
 * SKELETON (=type --> skin page structure with header, menu, footer)
 *     |----- STRUCTURE (=type --> layout colums (1,2,3 columns))
 *               |------ BLOCK (=type --> collection of elements)
 *                         |------ ELEMENT (=type --> button, image, text paragraph)
 *                                     |-------- VARIABLE (=type --> year, month)
 * 
 * 
 * FAVORITES
 * ==========
 * favorite designobjects are objects that are used a lot like <img> and <p>.
 * 
 * 08 apr 2024: TPageBuilderControllerAbstract created
 */

include_once(APP_PATH_CMS.DIRECTORY_SEPARATOR.'bootstrap_admin_auth.php');


abstract class TPageBuilderControllerAbstract extends TCRUDDetailSaveControllerAJAX
{
    protected $sModule = '';
    protected $objModel = null;
    // protected $arrFormElements = array();//stores all form element objects (used for looping validators)

    protected $objHidACT = null; //InputHidden --> //Anti-Csrf-Token (=generated by form generator and needs to be present when submitting the form to validate that the submission came from the same server)
    protected $objEdtNameInternal = null; //InputText
    protected $objSelLanguage = null; //Select
    protected $objSelAuthor = null; //Select
    protected $objSelStatus = null; //Select  
    protected $objChkNeedsWork = null; //InputCheckbox
    protected $objEdtNotesInternal = null; //Textarea

    private $objEdtHTMLTitle = null; //InputText
    private $objSelWebsite = null; //Select
    private $objEdtHTMLMetaDescription = null; //InputText
    private $objEdtURLSlug = null; //InputText
    private $objEdtCanonicalURL = null; //InputText
    private $objEdt301RedirectURL = null; //InputText
    protected $objEdtPassword = null; //InputText
    protected $objEdtPublishDate = null; //InputText
    protected $objEdtPublishTime = null; //dr\classes\dom\tag\form\InputTime
    protected $objSelVisibility = null; //Select  


    protected $sDateFormat = 'm/d/Y'; //default php date format
    protected $sTimeFormat = 'h:i A'; //default php date format
    protected $sDateTimeFormat = 'm/d/Y h:i A'; //default php date format    

    const AK_TYPES_ALLOWDRAGDROPSFROMTYPES = 'allow-dragdrops-from-types'; //Array-Key in types array: allowing drag-drops from which types

    const FIELD_DATA                = 'sData';
    const FIELD_HTMLRENDERED        = 'sHTMLRendered';
    

    const AK_SAVE_JSONRESPONSE_ERRORCODE = 'errorcode';
    const AK_SAVE_JSONRESPONSE_ERRORMESSAGE = 'errormessage';
    const AK_SAVE_JSONRESPONSE_ERRORFIELD = 'errorfield'; 
    const AK_SAVE_JSONRESPONSE_RECORDID = 'recordid';

    const JSONRESPONSE_ERRORCODE_NOERROR = 0;
    const JSONRESPONSE_ERRORCODE_SAVEERROR = 1;
    const JSONRESPONSE_ERRORCODE_CANNOTFINDMODULE = 2;
    const JSONRESPONSE_ERRORCODE_AUTHORISATIONFAILED = 3;
    const JSONRESPONSE_ERRORCODE_HTMLDATAEMPTY = 4;
    const JSONRESPONSE_ERRORCODE_HTMLRENDEREDEMPTY = 5;
    const JSONRESPONSE_ERRORCODE_INPUTERROR = 6;
    const JSONRESPONSE_ERRORCODE_UNKNOWN = 999;


    public function __construct()
    {
        //handle preview
        if (isset($_GET[ACTION_VARIABLE_PREVIEW]))
        {   
            if ($_GET[ACTION_VARIABLE_PREVIEW] == ACTION_VALUE_PREVIEW)
            {
                $this->objModel = $this->getNewModel();
                $this->handlePreview();
                return; //quit
            }
        }
        

        //the parent renders things to screen
        parent::__construct();        
    }


    public function initModel()
    {
        global $objAuthenticationSystem;
        global $objCurrentModule;
        $objStatusses = new TPageBuilderDocumentsStatusses();
        $objModules = new TSysModules();

       //defaults
        $objModules->limitOne()->loadFromDB();
        $this->objModel->setModuleID($objModules->getID());
        $this->objModel->setModuleVersionNumber($objCurrentModule->getVersion());
        $this->objModel->setMetaModuleNameInternal(APP_ADMIN_CURRENTMODULE);
        $this->objModel->setMetaModuleNameNice($objCurrentModule->getNameDefault());
        $this->objModel->setTranslationLanguageID($objAuthenticationSystem->getUsers()->getLanguageID()); 
        $this->objModel->setAuthorUserID($objAuthenticationSystem->getUsers()->getID()); 
        $objStatusses->loadFromDBByIsDefault();
        $this->objModel->setStatusID($objStatusses->getID()); 

        $this->objModel->setWebsiteID($_SESSION[SESSIONARRAYKEY_SELECTEDSITEID]); 
        $this->objModel->setPublishDate(null);
        $this->objModel->setVisibility(TPageBuilderWebpages::ENUM_VISIBILITY_PRIVATE);   
        $this->objModel->setNameInternal($this->getDefaultNameInternal());
    }

    /**
     * get the html id of the div of the tab-id
     * <div id="">
     */
    public function getTabHeadId($sPanel, $sCategory, $sDesktopOrMobile)
    {
        //template: tab-head-new-blocks-desktop
        return 'tab-head-'.sanitizeHTMLTagIdName($sPanel).'-'.sanitizeHTMLTagIdName($sCategory).'-'.sanitizeHTMLTagIdName($sDesktopOrMobile);
    }

    /**
     * get the html id of the div of the tab-content
     * <div id="">
     */
    public function getTabContentId($sPanel, $sCategory, $sDesktopOrMobile)
    {
        //template: tab-content-new-blocks-desktop
        return 'tab-content-'.sanitizeHTMLTagIdName($sPanel).'-'.sanitizeHTMLTagIdName($sCategory).'-'.sanitizeHTMLTagIdName($sDesktopOrMobile);
    }


    /**
     * is called before a record is loaded
     */
    public function onLoadPre() 
    {        
        
    }  

    /**
     * is called after a record is loaded
     */
    public function onLoadPost() 
    {        
        
    }    

    /**
     * is called when this controller is created,
     * so you can instantiate classes or initiate values for example 
     */
    public function onCreate() 
    {
    } 

    /**
     * is called when a record is saved
     * this method has to send the proper error messages to the user!!
     * 
     * @return boolean it will NOT SAVE
     */
    public function onSavePre() { return array(); }    

    /**
     * is called AFTER a record is saved
     * 
     * @param boolean $bWasSaveSuccesful did saveToDB() return false or true?
     * @return boolean returns true on success otherwise false
     */
    public function onSavePost($bWasSaveSuccesful){ return array(); }
        

    /**
     * load record, if new, then create one
     */
    protected function handlePreview()
    {
        global $objAuthenticationSystem;

        if (isset($_GET[ACTION_VARIABLE_ID]))
        {
            if (!$this->objModel->loadFromDBByID($_GET[ACTION_VARIABLE_ID]))
            {

                logError(__CLASS__.': '.__FUNCTION__.': '.__LINE__, "Preview pagebuilder page: Load record failed!!!", $objAuthenticationSystem->getUsers()->getUsername());
            }
            else
            {
                if ($this->getAuthView())
                {
                    echo $this->renderPreview();
                    return;
                }
                else
                {
                    showAccessDenied(transcms('message_noaccess_viewrecords', 'you don\'t have permission to view these records'));
                    die();
                }
            }        
        }
        else
        {
            echo transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_error_preview_norecordid', 'Error: Can\'t render preview without having a record id.<br>NOTE: Document needs to be saved first before being able to display a preview');
            logError(__FILE__.__LINE__, 'url parameter variable "'.ACTION_VARIABLE_ID.'" does not exist. So no value can be read');
        }
        

    }


    /**
     * return the url to see a preview
     * if returned '' then preview button will not be shown
     * 
     * PLEASE OVERLOAD WHEN YOU CAN OFFER A BETTER PREVIEW on the website itself !!!
     */
    public function getURLPreview()
    {
        // global $sURLThisScript;

        return addVariableToURL(APP_URLTHISSCRIPT, ACTION_VARIABLE_PREVIEW, ACTION_VALUE_PREVIEW);
    }


    /**
     * returns a div with detail controls for the document like: 
     * title, featured image, language, website etc
     * 
     * the returned html is a late-binded variable (= not cached)
     * 
     * returns something like this:
     * <div>
     *   title:<input type="edit">
     *   language:<select><option="nl">dutch</option></select>
     * </div>
     * 
     * @return string with <div> and controls inside the div
     */
    public function getDIVDocumentDetails()
    {
        $sReturn = '';

        //Anti CSRF token
        $sReturn .= '<!-- ACT -->'.$this->objHidACT->render();

        //internal name
        $sReturn .= '<!-- internal name -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtNameInternal->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_nameinternal', 'Name (internal reference)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtNameInternal->render().'
                    </div>';

        //html title
        if ($this->getUseHTMLTitle())
        {
            $sReturn .= '<!-- html title -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtHTMLTitle->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_htmltitle', 'HTML Title').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtHTMLTitle->render().'
                    </div>';
        }

        //language
        $sReturn .= '<!-- language -->
                    <div class="formsection-line">
                        <label for="'.$this->objSelLanguage->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_language', 'Language').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objSelLanguage->render().'
                    </div>';

        //slug
        if ($this->getUseURLSlug())
        {
            $sReturn .= '<!-- slug -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtURLSlug->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_urlslug', 'URL slug').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtURLSlug->render().'                   
                    </div>';
        }

        //website
        if ($this->getUseWebsite())
        {
            $sReturn .= '<!-- website -->
                    <div class="formsection-line">
                        <label for="'.$this->objSelWebsite->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_website', 'Website').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objSelWebsite->render().'
                    </div>';
        }

        //author
        $sReturn .= '<!-- author -->
                    <div class="formsection-line">
                        <label for="'.$this->objSelAuthor->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_author', 'Author').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objSelAuthor->render().'
                    </div>';

        //needs work
        $sReturn .= '<!-- needs work -->
                    <div class="formsection-line">
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objChkNeedsWork->render().'
                        <label for="'.$this->objChkNeedsWork->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_needswork', 'Needs work').'</label>
                    </div>';

        //status
        $sReturn .= '<!-- status -->
                    <div class="formsection-line">
                        <label for="'.$this->objSelStatus->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_status', 'Status').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objSelStatus->render().'           
                    </div>';

        //meta description
        if ($this->getUseHTMLMetaDescription())
        {        
            $sReturn .= '<!-- meta description -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtHTMLMetaDescription->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_metadescription', 'Short excerpt').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtHTMLMetaDescription->render().'
                    </div>';
        }
                

        //publish date
        if ($this->getUsePublishDate())
        {
            // $this->objEdtPublishTime->setStyle("background:blue");
            // $sReturn .= '<!-- publish date -->
            //         <div class="formsection-line">
            //             <label for="'.$this->objEdtPublishDate->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_publishdate', 'Publish date').'</label>
            //             <div class="formsection-line-errorlist"></div>
            //             <div style="display:grid; grid-template-columns: 1fr 1fr;">                        
            //                 <div>'.$this->objEdtPublishDate->render().'</div>
            //                 <div>'.$this->objEdtPublishTime->render().'</div>
            //             </div>
            //         </div>';
            $sReturn .= '<!-- publish date -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtPublishDate->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_publishdate', 'Publish date').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtPublishDate->render().'
                    </div>';
        }

        //visibility
        if ($this->getUseVisibility())
        {
            $sReturn .= '<!-- visibility -->
                    <div class="formsection-line">
                        <label for="'.$this->objSelVisibility->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_visibility', 'Visibility (after pub.dat.)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objSelVisibility->render().'           
                    </div>';
        }

        //password
        if ($this->getUsePassword())
        {
            $sReturn .= '<!-- password -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtPassword->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_password', 'Password (empty = none)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtPassword->render().'
                    </div>';
        }

        //canonical url
        if ($this->getUseCanonicalURL())
        {
            $sReturn .= '<!-- canonical url -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtCanonicalURL->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_canonicalurl', 'Canonical (start w https://)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtCanonicalURL->render().'           
                    </div>';
        }

        //301 redirect url
        if ($this->getUse301RedirectURL())
        {
            $sReturn .= '<!-- 301 redirect url -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdt301RedirectURL->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_301redirecturl', '301 redirect (start w https://)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdt301RedirectURL->render().'               
                    </div>';
        }

        //internal notes
        $sReturn .= '<!-- internal notes -->
                    <div class="formsection-line">
                        <label for="'.$this->objEdtNotesInternal->getId().'">'.transm(APP_ADMIN_CURRENTMODULE, 'pagebuilder_detailpanel_tabdocument_description_notesinternal', 'Notes (internal)').'</label>
                        <div class="formsection-line-errorlist"></div>
                        '.$this->objEdtNotesInternal->render().'
                    </div>';

        return $sReturn;
    }    

    /**
     * render preview
     * 
     */
    protected function renderPreview()
    {
        global $sModule;

		$sHTML = '<html>';
		$sHTML .= '<head>';
		$sHTML .= '<style>';
        ob_start();
        include getPathModuleCSS($sModule, true).'pagebuilder-frontpage-theme.css';
		$sHTML .= ob_get_clean();
        $sHTML .= '</style>';
		$sHTML .= '<title>';
		$sHTML .= $this->objModel->getHTMLTitle();
		$sHTML .= '</title>';
		$sHTML .= '</head>';
		$sHTML .= '<body>';
		$sHTML .= $this->objModel->getRenderedHTML();
		$sHTML .= '</body>';
		$sHTML .= '</html>';
		return $sHTML;
    }   

    /**
     * render shissle to screen
     *
     * @param $arrVars extra variables to add to the render (you can call this method in one of the child classes)
     * @return void
     */
    public function render($arrVars = array())
    {
        $arrVars['sData'] = $this->objModel->getData();
        $arrVars['sURLPreview'] = $this->getURLPreview();
        $arrVars['sHTMLTitle'] = $this->objModel->getHTMLTitle();
        $arrVars['sHTMLMetaDescription'] = $this->objModel->getHTMLMetaDescription();
        $arrVars['sURLReturn'] = $this->getReturnURL();
        $arrVars['sDivDocumentDetails'] = '<div class="detailpanel-grid">'.$this->getDIVDocumentDetails().$this->getDIVDocumentDetailsChild().'</div>';
        $arrVars['sNameInternal'] = $this->objModel->getNameInternal();
        $arrVars['sHTMLTitle'] = $this->objModel->getHTMLTitle();

        parent::render($arrVars);
    }

    /**
     * create form elements
     */    
    protected function populate()
    {
        global $objAuthenticationSystem;

        //anti Cross Site Scripting Token
        $this->objHidACT = $this->getFormGenerator()->getCSRFTokenDOMElement();
        // $this->arrFormHTMLElements[] = $this->objHidACT; ==> only nessesary for validators

        //name internal
        $this->objEdtNameInternal = new InputText();
        $this->objEdtNameInternal->setNameAndID('edtNameInternal');
        $this->objEdtNameInternal->setOnchange("setDirtyRecord(); updateTitle(this.value); onNameInternalChange();");
        $this->objEdtNameInternal->setOnKeyUp("updateTitle(this.value);");
        $this->objEdtNameInternal->setRequired(true);   
        $this->objEdtNameInternal->setMaxLength(100);
        $objValidator = new TMaximumLength(100);
        $this->objEdtNameInternal->addValidator($objValidator);    
        $objValidator = new TRequired();
        $this->objEdtNameInternal->addValidator($objValidator);   
        $this->arrFormHTMLElements[] = $this->objEdtNameInternal;

        //language
        $this->objSelLanguage = new Select();
        $this->objSelLanguage->setNameAndID('selLanguage');
        $this->objSelLanguage->setOnchange("setDirtyRecord()");     
        $this->arrFormHTMLElements[] = $this->objSelLanguage;        

        //author
        $this->objSelAuthor = new Select();
        $this->objSelAuthor->setNameAndID('selAuthor');
        $this->objSelAuthor->setOnchange("setDirtyRecord()"); 
        $this->objSelAuthor->setDisabled(!$this->getAuthChangeAuthor());
        $this->arrFormHTMLElements[] = $this->objSelAuthor;                

        //status
        $this->objSelStatus = new Select();
        $this->objSelStatus->setNameAndID('selStatus');
        $this->objSelStatus->setOnchange("setDirtyRecord()"); 
        $this->objSelStatus->setDisabled(!$this->getAuthChangeStatus());        
        $this->arrFormHTMLElements[] = $this->objSelStatus;            
        
        //needs work
        $this->objChkNeedsWork = new InputCheckbox();
        $this->objChkNeedsWork->setNameAndID('chkNeedsWork');
        $this->objChkNeedsWork->setOnchange("setDirtyRecord()");                
        $this->arrFormHTMLElements[] = $this->objChkNeedsWork;         

        //notes internal
        $this->objEdtNotesInternal = new Textarea();
        $this->objEdtNotesInternal->setNameAndID('edtNotesInternal');
        $this->objEdtNotesInternal->setOnchange("setDirtyRecord()");                                                  
        $this->arrFormHTMLElements[] = $this->objEdtNotesInternal;                        
        
        //html title
        $this->objEdtHTMLTitle = new InputText();
        $this->objEdtHTMLTitle->setNameAndID('edtHTMLTitle');
        $this->objEdtHTMLTitle->setOnchange("setDirtyRecord(); onHTMLTitleChange();");                                            
        $this->arrFormHTMLElements[] = $this->objEdtHTMLTitle;            
        

        //url slug
        $this->objEdtURLSlug = new InputText();
        $this->objEdtURLSlug->setNameAndID('edtURLSlug');
        $this->objEdtURLSlug->setOnchange("setDirtyRecord()");
        $this->objEdtURLSlug->setDisabled(!$this->getAuthChangeURLSlug());                                                     
        $this->arrFormHTMLElements[] = $this->objEdtURLSlug;                  

        //website
        $this->objSelWebsite = new Select();
        $this->objSelWebsite->setNameAndID('selWebsite');
        $this->objSelWebsite->setOnchange("setDirtyRecord()");
        $this->objSelWebsite->setDisabled(!$this->getAuthChangeWebsite());        
        $this->arrFormHTMLElements[] = $this->objSelWebsite;                          

        //canonical
        $this->objEdtCanonicalURL = new InputText();
        $this->objEdtCanonicalURL->setNameAndID('edtCanonicalURL');
        $this->objEdtCanonicalURL->setOnchange("setDirtyRecord()");    
        $this->objEdtCanonicalURL->setDisabled(!$this->getAuthChangeCanonical());                                                        
        $this->arrFormHTMLElements[] = $this->objEdtCanonicalURL;                                  

        //301 redirect
        $this->objEdt301RedirectURL = new InputText();
        $this->objEdt301RedirectURL->setNameAndID('edt301RedirectURL');
        $this->objEdt301RedirectURL->setOnchange("setDirtyRecord()");                                                            
        $this->objEdt301RedirectURL->setDisabled(!$this->getAuthChange301Redirect());                                                                
        $this->arrFormHTMLElements[] = $this->objEdt301RedirectURL;                                          

        //meta description
        $this->objEdtHTMLMetaDescription = new Textarea();
        $this->objEdtHTMLMetaDescription->setNameAndID('edtMetaDescription');
        $this->objEdtHTMLMetaDescription->setOnchange("setDirtyRecord()");                                                                  
        $this->arrFormHTMLElements[] = $this->objEdtHTMLMetaDescription;            

        //page password
        $this->objEdtPassword = new InputText();
        $this->objEdtPassword->setNameAndID('edtPassword');
        $this->objEdtPassword->setOnchange("setDirtyRecord()");                                                                          
        $this->objEdtPassword->setDisabled(!$this->getAuthChangePassword());        
        $this->arrFormHTMLElements[] = $this->objEdtPassword;                    

        //publish date
        // $this->objEdtPublishDate = new InputDate($this->sDateFormat);
        // $this->objEdtPublishDate->setNameAndID('edtPublishDate');
        // $this->objEdtPublishDate->setOnchange("setDirtyRecord()");
        // $this->objEdtPublishDate->setDisabled(!$this->getAuthChangePublishDate());                        
        // $this->arrFormHTMLElements[] = $this->objEdtPublishDate;                

        // //publish time
        // $this->objEdtPublishTime = new InputTime($this->sTimeFormat);
        // $this->objEdtPublishTime->setNameAndID('edtPublishTime');
        // $this->objEdtPublishTime->setOnchange("setDirtyRecord()");
        // $this->objEdtPublishTime->setDisabled(!$this->getAuthChangePublishDate());                        
        // $this->arrFormHTMLElements[] = $this->objEdtPublishTime->getHoursHTMLElementObject();                        
        // $this->arrFormHTMLElements[] = $this->objEdtPublishTime->getMinutesHTMLElementObject();  
        $this->objEdtPublishDate = new DRInputDateTime();
        $this->objEdtPublishDate->setNameAndID('edtPublishDate');
        $this->objEdtPublishDate->setPHPDateFormat($objAuthenticationSystem->getUsers()->getDateFormatLong()); //reads user preferences date
        $this->objEdtPublishDate->setPHPTimeFormat($objAuthenticationSystem->getUsers()->getTimeFormatLong()); //reads user preferences time
        $this->objEdtPublishDate->setFirstDayOfWeek($objAuthenticationSystem->getUsers()->getWeekStartsOn()); //reads user preferences first day
        $this->objEdtPublishDate->setAllowEmptyDateTime(true);
        $this->objEdtPublishDate->setOnchange("setDirtyRecord()");
        $this->objEdtPublishDate->setDisabled(!$this->getAuthChangePublishDate());                        
        $this->arrFormHTMLElements[] = $this->objEdtPublishDate;   

        //visibility
        $this->objSelVisibility = new Select();
        $this->objSelVisibility->setNameAndID('selVisibility');
        $this->objSelVisibility->setOnchange("setDirtyRecord()");
        $this->objSelVisibility->setDisabled(!$this->getAuthChangeVisibility());                
        $this->arrFormHTMLElements[] = $this->objSelVisibility;                                

        
    }

    /**
     * move data from model to the view
     */    
    protected function modelToView()
    {
        $objLang = new TSysLanguages();
        $objUsers = new TSysCMSUsers();
        $objStatus = new TPageBuilderDocumentsStatusses();
        $objSites = new TSysWebsites();

        //internal name
        $this->objEdtNameInternal->setValue($this->objModel->getNameInternal());

        //languages
        $objLang->where(TSysLanguages::FIELD_ISCMSLANGUAGE, true);
        $objLang->loadFromDB();
        $objLang->generateHTMLSelect($this->objModel->getTranslationLanguageID(), $this->objSelLanguage);        


        //author
        $objUsers->loadFromDB();
        $objUsers->generateHTMLSelect($this->objModel->getAuthorUserID(), $this->objSelAuthor);        

        //status
        $objStatus->sort(TPageBuilderDocumentsStatusses::FIELD_POSITION);
        $objStatus->loadFromDB();
        $objStatus->generateHTMLSelect($this->objModel->getStatusID(), $this->objSelStatus); 

        //needswork
        $this->objChkNeedsWork->setChecked($this->objModel->getNeedsWork());        

        //internal notes
        $this->objEdtNotesInternal->setValue($this->objModel->getNotesInternal());

        
        //html title
        $this->objEdtHTMLTitle->setValue($this->objModel->getHTMLTitle());

        //sites
        $objSites->loadFromDB();
        $objSites->generateHTMLSelect($this->objModel->getWebsiteID(), $this->objSelWebsite);  

        //url slug
        $this->objEdtURLSlug->setValue($this->objModel->getURLSlug());

        //canonical url
        $this->objEdtCanonicalURL->setValue($this->objModel->getCanonicalURL());        

        //301 redirect url
        $this->objEdt301RedirectURL->setValue($this->objModel->get301RedirectURL());        

        //meta description
        $this->objEdtHTMLMetaDescription->setValue($this->objModel->getHTMLMetaDescription());   

        //passsword
        $this->objEdtPassword->setValue($this->objModel->getPassword());

        //publish date
        // $this->objEdtPublishDate->setValue($this->objModel->getDateAsString(TPageBuilderWebpages::FIELD_PUBLISHDATE, $this->sDateFormat));
        // $this->objEdtPublishTime->setValue($this->objModel->getTimeAsString(TPageBuilderWebpages::FIELD_PUBLISHDATE, $this->sTimeFormat));
        $this->objEdtPublishDate->setValueAsTDateTime($this->getModel()->get(TPageBuilderWebpages::FIELD_PUBLISHDATE));

        //visibility
        $this->objModel->generateHTMLSelectVisibility($this->objModel->getVisibility(), $this->objSelVisibility);        
    }


    /**
     * move data from view to the model
     */    
    protected function viewToModel()
    {
        //declare
        global $objCurrentModule; //business logic of module


        //==== transfer data to model
        $this->objModel->setNameInternal($this->objEdtNameInternal->getValueSubmitted());
        $this->objModel->setTranslationLanguageID($this->objSelLanguage->getValueSubmittedAsInt());
        if ($this->getAuthChangeAuthor())
            $this->objModel->setAuthorUserID($this->objSelAuthor->getValueSubmittedAsInt());
        if ($this->getAuthChangeStatus())
            $this->objModel->setStatusID($this->objSelStatus->getValueSubmittedAsInt());
        $this->objModel->setNeedsWork($this->objChkNeedsWork->getValueSubmittedAsBool());
        $this->objModel->setNotesInternal($this->objEdtNotesInternal->getValueSubmitted());

        if ($this->getUseHTMLTitle())
            $this->objModel->setHTMLTitle($this->objEdtHTMLTitle->getValueSubmitted());
        if ($this->getUseURLSlug())    
            if ($this->getAuthChangeURLSlug())    
                $this->objModel->setURLSlug($this->objEdtURLSlug->getValueSubmitted());
        if ($this->getUseWebsite())      
            if ($this->getAuthChangeWebsite())
                $this->objModel->setWebsiteID($this->objSelWebsite->getValueSubmitted());
        if ($this->getUseCanonicalURL())
            if ($this->getAuthChangeCanonical())
                $this->objModel->setCanonicalURL($this->objEdtCanonicalURL->getValueSubmitted());
        if ($this->getUse301RedirectURL())     
            if ($this->getAuthChange301Redirect())   
                $this->objModel->set301RedirectURL($this->objEdt301RedirectURL->getValueSubmitted());
        if ($this->getUseHTMLMetaDescription())        
            $this->objModel->setHTMLMetaDescription($this->objEdtHTMLMetaDescription->getValueSubmitted());
        if ($this->getUsePassword())      
            if ($this->getAuthChangePassword())  
                $this->objModel->setPassword($this->objEdtPassword->getValueSubmitted());
        if ($this->getUsePublishDate())        
        {
            if ($this->getAuthChangePublishDate())
            {
                // $this->objModel->setDateAsString(TPageBuilderWebpages::FIELD_PUBLISHDATE, $this->objEdtPublishDate->getValueSubmitted(), $this->sDateFormat);        
                // $this->objModel->setTimeAsString(TPageBuilderWebpages::FIELD_PUBLISHDATE, $this->objEdtPublishTime->getValueSubmitted(), $this->sTimeFormat);                    
                $this->getModel()->set(TPageBuilderWebpages::FIELD_PUBLISHDATE, $this->objEdtPublishDate->getValueSubmittedAsTDateTimeISO());
            }
        }
        if ($this->getUseVisibility())  
            if ($this->getAuthChangeVisibility())      
                $this->objModel->setVisibility($this->objSelVisibility->getValueSubmitted());      
            
        //extra fields
        $this->objModel->setData($_POST[TPageBuilderControllerAbstract::FIELD_DATA]);
        $this->objModel->setRenderedHTML($_POST[TPageBuilderControllerAbstract::FIELD_HTMLRENDERED]);
        $this->objModel->setNeedsRender(false);
        // $this->objModel->setModuleID($objSysModulesDB->getID());///@todo find proper module. 16-8-2025 commented because objSysModulesDB was removed from bootstrap
        $this->objModel->setModuleVersionNumber($objCurrentModule->getVersion());        
    }    
    





    /**
     * return path of the page template
     *
     * @return string
     */
    public function getTemplatePath()
    {
        return;// return getPathModuleTemplates($this->sModule, true).'tpl_pagebuilder.php';        
    }

    /**
     * return path of the skin template
     * 
     * return '' if no skin
     *
     * @return string
     */
    public function getSkinPath()
    {
        return getPathModuleTemplates(APP_ADMIN_CURRENTMODULE, true).'skin_pagebuilder.php';        
    }

    /**
     * sometimes you don;t want to user the checkin checkout system, even though the model supports it
     * for example: the settings.
     * The user needs to be able to navigate through the tabsheets, without locking records
     * 
     * ATTENTION: if this method returns true and the model doesn't support it: the checkinout will NOT happen!
     * 
     * @return bool return true if you want to use the check-in/checkout-system
     */
    public function getUseCheckinout()
    {
        return true;
    }    

    /**
     * returns the nice-name of the controller that is using this record + the user name
     * 
     * @return string
     */
    public function getCheckoutSource()
    {
        global $objAuthenticationSystem;
        return $objAuthenticationSystem->getUsers()->getUserName().' on '.getIPAddressClient();
    }    

    /**
     * return page title
     * This title is different for creating a new record and editing one.
     * It returns in the translated text in the current language of the user (it is not translated in the controller)
     * 
     * for example: "create a new user" or "edit user John" (based on if $objModel->getNew())
     *
     * @return string
     */
    public function getTitle()
    {
        //global APP_ADMIN_CURRENTMODULE;

        if ($this->getModel()->getNew())   
            return transm(APP_ADMIN_CURRENTMODULE, 'pagetitle_detailsave_languages_new', 'Create new document');
        else
            return transm(APP_ADMIN_CURRENTMODULE, 'pagetitle_detailsave_languages_edit', 'Edit document: [doc]', 'doc', $this->objModel->getHTMLTitle());           
    }    

    /*****************************************
     * 
     *  ABSTRACT FUNCTIONS
     * 
     *****************************************/


    /**
     * returns a div with detail controls for the document like: 
     * title, featured image, language, website etc
     * 
     * the returned html is a late-binded variable (= not cached)
     * 
     * returns something like this:
     * <div>
     *   title:<input type="edit">
     *   language:<select><option="nl">dutch</option></select>
     * </div>
     * 
     * @return string with <div> and controls inside the div
     */
    abstract public function getDIVDocumentDetailsChild();

    /**
     * returns an array with all the designobjects to use in the pagebuilder
     * 
     * structure of array: array["custom-html-element-tagname"] = "Corresponding JS Class"
     * for example: array["do-paragraph"] = "DOParagraph"
     * @return array
     */
    abstract public function getDesignObjects();

    /**
     * returns string with default name used as nameInternal
     * 
     * @return string
     */
    abstract public function getDefaultNameInternal();    


    /**
     * Use these features in the pagebuilder?
     */
    abstract public function getUseWebsite();
    abstract public function getUseURLSlug();
    abstract public function getUseCanonicalURL();
    abstract public function getUse301RedirectURL();
    abstract public function getUseHTMLTitle();
    abstract public function getUseHTMLDescription();
    abstract public function getUseHTMLMetaDescription();
    abstract public function getUsePassword();
    abstract public function getUsePublishDate();
    abstract public function getUseVisibility();

    /**
     * Authorized to do the following?
     */
    abstract public function getAuthChangeAuthor();
    abstract public function getAuthChangeWebsite();
    abstract public function getAuthChangeVisibility();
    abstract public function getAuthChangePublishDate();
    abstract public function getAuthChangePassword();
    abstract public function getAuthChangeStatus();
    abstract public function getAuthChangeURLSlug();
    abstract public function getAuthChangeCanonical();
    abstract public function getAuthChange301Redirect();


}